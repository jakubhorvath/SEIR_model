import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
from sys import argv
# new cases per day: I(t+1) = I(t) + f(S(t), I(t))
# f(S(t), I(t)) = alpha * S(t) * I(t)
# alpha - probability of infection per day
# alpha = beta / N
# beta - expected contacts per capita per day
# N - number of citizens
# then f(S(t), I(t)) = (beta / N) * S(t) * I(t)

# dS/dt = -f(S(t), I(t))
# dI/dt = f(S(t), I(t))
# therefore:
# dS/dt = -(beta / N) * S(t) * I(t)
# dI/dt = (beta / N) * S(t) * I(t)

# dR/dt = gamma * I(t)
# dI/dt = -gamma * I(t)
# gamma - expected recovery rate
# Tinf = 1 / gamma
# Tinf - length of recovery

# finally
# dS/dt = -(beta / N) * S(t) * I(t)
# dI/dt = (beta / N) * S(t) * I(t) - gamma * I(t)
# dR/dt = gamma * I(t)

# R0 = beta / gamma = beta * Tinf
# so if using R0:
# dS/dt = -(R0 / (N * Tinf)) * S(t) * I(t)
# dI/dt = (R0 / (N * Tinf)) * S(t) * I(t) - (1 / Tinf) * I(t)
# dR/dt = (1 / Tinf)  * I(t)

# for SEIR
# dS/dt = -(R0 / (N * Tinf)) * S(t) * I(t)
# dI/dt = (1 / Tinc) * E(t) - (I(t) / Tinf)
# dE/dt (R0 / (N * Tinf)) * S * I - (E(t) / Tinc) 
# dR/dt = I(t) / Tinf
# Tinc - incubation period


CITIZENS_CZECH = 10690000
T_inf = 9 # length of recovery
T_inc = 4 # incubation period
INFECTIOUS_FACTOR = np.array([6.33333333333333, 5.2, 5.8, 4.375, 4.83333333333333, 4.52631578947368, 4, 4.51724137931035, 5.37142857142857, 4.58620689655172, 3.53488372093023, 3.56730769230769, 3.26717557251908, 3.07446808510638, 2.83458646616541, 2.56907894736842, 2.33692722371968, 2.08411214953271, 1.66089965397924, 1.50132625994695, 1.75160051216389, 1.58592848904268, 1.86995515695067, 1.73333333333333, 1.56007067137809, 1.39912280701754, 1.40727272727273, 1.07673860911271, 1.1484375, 1.02434881087203, 0.918495297805643, 0.940568475452196, 0.951559020044543, 0.901622187336473, 0.945826423438364, 0.877133105802048, 0.785714285714286, 0.821533060269163, 0.717933836331979, 0.656925774400935, 0.642671854734112, 0.604195804195804, 0.581908831908832, 0.607922392886015, 0.708185053380783, 0.8627648839556, 1.04166666666667, 1.01958384332925, 1.00398936170213, 0.909547738693467, 0.816374269005848, 0.685555555555556, 0.642256902761104, 0.613245033112583, 0.611878453038674, 0.707736389684814, 0.752025931928687, 0.753271028037383, 0.814254859611231, 0.835214446952596, 0.793522267206478, 0.851293103448276, 0.866004962779156, 0.901856763925729, 0.918918918918919, 0.872448979591837, 0.90379746835443, 0.931232091690544, 0.867647058823529, 0.941176470588235, 0.961988304093567, 1.00840336134454, 1.08307692307692, 1.38983050847458, 1.33125, 1.37386018237082, 1.11944444444444, 1.15625, 1.0609756097561, 1.13145539906103, 0.924778761061947, 1, 0.896805896805897, 0.88735632183908, 0.794605809128631, 0.813397129186603, 0.784119106699752, 0.816438356164383, 0.813471502590673, 0.919060052219321, 1.04117647058824, 1.05379746835443, 1.13087248322148, 1.13057324840764, 1.12215909090909, 1.09322033898305, 1.15915915915916, 1.16320474777448, 1.15211267605634, 1.07341772151899, 1.02325581395349, 0.950777202072539, 0.918367346938775, 0.82640586797066, 0.811320754716981, 1.18181818181818, 1.24523160762943, 1.31666666666667, 1.47041420118343, 1.56686046511628, 1.31410256410256, 1.40043763676149, 1.33333333333333, 1.7102615694165, 2.05009276437848, 2.02276422764228, 2.0375, 2.00791139240506, 1.53882352941176, 1.15927601809955, 0.918006430868167, 0.699386503067485, 0.599684791174153, 0.558868501529052, 0.599531615925059, 0.648861646234676, 0.81469298245614, 0.886990801576872, 0.901504787961696, 0.875, 0.885290148448043, 0.889636608344549, 1.02666666666667, 1.03186646433991, 1.10119047619048, 1.17530487804878, 1.30105900151286, 1.41847041847042, 1.61029411764706, 1.60540540540541, 1.7367055771725, 1.57790697674419, 1.4028484231943, 1.29497716894977, 1.24158249158249, 1.13741598207618, 1.13633014001474, 1.0826686004351, 1.04866008462623, 1.0006779661017, 0.979645436638214, 0.964332036316472, 0.961821835231078, 0.940147948890383, 1.00677506775068, 1.02949061662198, 1.04572965702757, 1.03481894150418, 1.07081545064378, 1.04037685060565, 1.08138020833333, 1.05016077170418, 1.11440107671602, 1.10688042752171, 1.10478654592497, 1.02347983142685, 1.05511328842621, 0.992753623188406, 1.12130356065178, 1.11182669789227, 1.12411764705882, 1.1485780615206, 1.25608272506083, 1.15877287405813, 1.18746708794102, 1.16483516483517, 1.16422435573522, 1.18353510895884, 1.13190896423595, 1.13924611973392, 1.26774483378257, 1.36805555555556, 1.42062193126023, 1.50102585145671, 1.47489295445699, 1.45216158752658, 1.51015228426396, 1.51584101382488, 1.62957900492072, 1.74478754288731, 1.86652025378233, 1.68739495798319, 1.61618848565457, 1.51300117429961, 1.5120254121918, 1.53510262779448, 1.54407370517928, 1.51716435457324, 1.44716709169531, 1.3547418967587, 1.21461420541645, 1.16368327689082, 1.10182099961255, 1.15353968740423, 1.1067789100576, 1.07677745056794, 1.04760254988914, 1.03277305014417, 0.893663655685441, 1.05958099813184, 1.08960083349613, 1.14498313380515, 1.21545795028941, 1.4628762541806, 1.39657452301492, 1.58017091973944, 1.53093408815204, 1.75488822903244, 1.69699740893157, 1.56291987916498, 1.3560379713324, 1.49894347596408, 1.40248379784823, 1.44461409496437, 1.46370874682668, 1.52893599219077, 1.42920075519194, 1.37812428864102, 1.33046649949226, 1.37224565414482, 1.35087559284933, 1.37756054601497, 1.35395847442229, 1.31173382762971, 1.24104847396768, 1.21648774559449, 1.12641444298117, 1.06140051238258, 1.01351351351351, 0.975661975742987, 0.927403509940391, 0.936752253172603, 0.90746296104732, 0.957270064440539, 0.971199810212917])
INITIAL_INFECTED = 20 

def model(variables, t, R0, some):
    
    Susceptible = variables[0]
    Exposed = variables[1]
    Infected = variables[2]
    Recovered = variables[3]

    S = - (R0 / (CITIZENS_CZECH * T_inf)) * Susceptible * Infected
    
    I = (1 / T_inc) * Exposed - (Infected / T_inf)
    E = (R0 / (CITIZENS_CZECH * T_inf)) * Susceptible * Infected - (Exposed / T_inc)
    R = Infected / T_inf

    return np.array([S, E, I, R])

def main():
    
    counts = np.array([CITIZENS_CZECH - INITIAL_INFECTED, 0, INITIAL_INFECTED, 0])
    counts0 = counts
    n = len(INFECTIOUS_FACTOR) * 10
    time = np.linspace(0, len(INFECTIOUS_FACTOR), n)

    ## Saving the amounts for plotting ##
    S = np.array([0]*n)
    S[0] = CITIZENS_CZECH - INITIAL_INFECTED

    E = np.array([0]*n)

    I = np.array([0]*n)
    I[0] = INITIAL_INFECTED

    R = np.array([0]*n)
    ######################################

    Sum_I = [INITIAL_INFECTED]

    for i in range(1, n):
        tspan = [time[i-1], time[i]]
        counts = odeint(model, counts0, tspan, args=(INFECTIOUS_FACTOR[i//10],0 ))
        
        S[i] = counts[1][0]
        E[i] = counts[1][1]
        I[i] = counts[1][2]
        R[i] = counts[1][3]
        counts0 = counts[1]
        if I[i] > I[i-1]:
            
            Sum_I.append(Sum_I[i-1] + I[i])
        else:
            Sum_I.append(Sum_I[i-1])

    if argv[1] == "counts":
        #plt.plot(time, S, label="S")
        plt.plot(time, E, label="E")
        plt.plot(time, I, label="I")
        #plt.plot(time, R, label="R")
        plt.ylabel('count')
    elif argv[1] == "total":
        plt.plot(time, Sum_I, label="Total Infected")
        plt.ylabel("Total Infected")
    plt.legend()
    plt.xlabel('time')
    
    plt.show()

if __name__ == "__main__":

    main()
    
